{"version":3,"sources":["assets/audio/click1.wav","assets/audio/click2.wav","containers/metronome.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Metronome","props","bpmChangeHandler","e","bpm","target","value","state","playing","clearInterval","timer","setInterval","playClick","setState","count","startStop","click2","play","click1","Audio","this","className","type","min","max","onChange","bind","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,uPCmF5BC,E,kDA5EX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAYVC,iBAAmB,SAAAC,GACf,IAAMC,EAAMD,EAAEE,OAAOC,MAElB,EAAKC,MAAMC,UACVC,cAAc,EAAKC,OACnB,EAAKA,MAAQC,YAAY,EAAKC,UAAW,GAAGR,EAAK,KACjD,EAAKS,SAAS,CACVC,MAAM,EACNV,IAAIA,MArBG,EA0BnBW,UAAY,WACL,EAAKR,MAAMC,SACVC,cAAc,EAAKC,OACnB,EAAKG,SAAS,CACVL,SAAQ,MAIZ,EAAKE,MAAQC,YAAY,EAAKC,UAAW,GAAG,EAAKL,MAAMH,IAAK,KAC5D,EAAKS,SAAS,CAEVC,MAAM,EACNN,SAAQ,GAGV,EAAKI,aAzCI,EA6CnBA,UAAY,WAAK,IACNE,EAAS,EAAKP,MAAdO,MAEJA,EAAM,IAAI,EACT,EAAKE,OAAOC,OAGZ,EAAKC,OAAOD,OAGhB,EAAKJ,SAAS,CACVC,MAAMA,EAAM,KArDhB,EAAKP,MAAQ,CACRC,SAAQ,EACRJ,IAAI,IACJU,MAAM,GAEX,EAAKI,OAAS,IAAIC,MAAMD,KACxB,EAAKF,OAAS,IAAIG,MAAMH,KATT,E,qDA4DV,IAAD,EACgBI,KAAKb,MAAnBC,EADF,EACEA,QAAQJ,EADV,EACUA,IACd,OACI,yBAAKiB,UAAU,gBACf,yBAAKA,UAAU,cACX,oCAAUjB,GACd,2BAAOkB,KAAK,QAAQC,IAAI,KAAKC,IAAI,MAAMlB,MAAOF,EAC1CqB,SAAUL,KAAKlB,iBAAiBwB,KAAKN,SAGzC,4BAAQO,QAASP,KAAKL,WAAYP,EAAQ,OAAO,c,GAvErCoB,aCOTC,MARf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCIcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.28df023b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","import React,{Component} from 'react'\nimport './metronome.css';\nimport click1 from '../assets/audio/click1.wav';\nimport click2 from '../assets/audio/click2.wav';\n\n\nclass Metronome extends Component{\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             playing:false,\n             bpm:180,\n             count:0,\n            }\n        this.click1 = new Audio(click1);\n        this.click2 = new Audio(click2);\n\n    }\n\n    bpmChangeHandler = e =>{\n        const bpm = e.target.value;\n\n        if(this.state.playing){\n            clearInterval(this.timer);\n            this.timer = setInterval(this.playClick,(60/bpm)*1000);\n            this.setState({\n                count:0,\n                bpm:bpm\n            })\n        }\n    }\n\n    startStop = ()=>{\n        if(this.state.playing){\n            clearInterval(this.timer);\n            this.setState({\n                playing:false\n            });\n        }\n        else{\n            this.timer = setInterval(this.playClick,(60/this.state.bpm)*1000);\n            this.setState({\n                \n                count:0,\n                playing:true\n\n                \n            },this.playClick)\n        }\n    }\n\n    playClick = ()=>{\n        const {count} = this.state;\n\n        if(count%2===0){\n            this.click2.play();\n        }\n        else{\n            this.click1.play();\n        }\n\n        this.setState({\n            count:count+1\n        })\n    }\n    \n    render(){\n        const{playing,bpm}= this.state;\n        return(\n            <div className=\"metronome-in\">\n            <div className=\"bpm-slider\">\n                <div>BPM {bpm}</div>\n            <input type=\"range\" min=\"30\" max=\"300\" value={bpm}\n                onChange={this.bpmChangeHandler.bind(this)}\n            ></input>\n            </div>\n            <button onClick={this.startStop}>{playing?'Stop':'Start'}</button>\n            </div>\n        );\n    }\n}\n\nexport default Metronome","import React from 'react';\n\nimport './App.css';\nimport Metronome from './containers/metronome'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Metronome/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}